{
  "seed": "fHxYIXIJyPEePqKjoJt_2T5bGNg_WESk_5JU5iRfS6w=",
  "data": "Battle of Vukovar
From Wikipedia, the free encyclopedia
Battle of Vukovar
Part of the Croatian War of Independence
A severely damaged brick and concrete tower, pierced with numerous shell holes
The Vukovar water tower, 2010. Heavily damaged in the battle, the tower has been preserved as a symbol of the conflict.
Date 	25 August – 18 November 1991
(2 months, 3 weeks and 3 days)
Location 	Vukovar, Croatia
Vukovar is located in Croatia
Vukovar
Vukovar
Vukovar (Croatia)
Result 	Serb pyrrhic victory[1][2]
Belligerents

Yugoslav People's Army Yugoslav People's Army
SAO Eastern Slavonia, Baranja and Western Syrmia SAO Eastern Slavonia, Baranja and Western Syrmia
(Croatian Serb insurgents)
Republic of Serbia Territorial Defence Force Republic of Serbia Territorial Defence Force
Serb Volunteer Guard
White Eagles 	Croatia Republic of Croatia
Croatia Croatian National Guard (to November 1991)
Croatia Croatian Army (from November 1991)
HOS flag.svg Croatian Defence Forces
Commanders and leaders

Yugoslav People's Army Aleksandar Spirkovski (until the end of September 1991)
Yugoslav People's Army Života Panić (from the end of September 1991)
Yugoslav People's Army Mile Mrkšić
Yugoslav People's Army Veselin Šljivančanin
Yugoslav People's Army Mladen Bratić †
Yugoslav People's Army Andrija Biorčević
SAO Eastern Slavonia, Baranja and Western Syrmia Goran Hadžić
Željko Ražnatović
Vojislav Šešelj 	Croatia Blago Zadro †
Croatia Mile Dedaković
Croatia Branko Borković
Croatia Marko Babić
Croatia Anton Tus
HOS flag.svg Robert Šilić †
Strength
~ 36,000[3] 	~ 1,800[4]
Casualties and losses
Official Serbian figures:
3,603 casualties
(1,103 dead, 2,500 wounded)
110 armoured vehicles and 3 aircraft destroyed 	Official Croatian figures:
1,649 casualties
(879 dead, 770 wounded)
1 Antonov An-2 shot down
1,131 civilians killed[5]
550 missing overall[6]

    v t e 

Croatian War
of Independence

    Pakrac Plitvice Lakes Kijevo Borovo Selo Zadar riot Split protest Stinger Dalj Labrador Vukovar
        Massacre Osijek Gospić
        Massacre Kusonje The Barracks Varaždin Bjelovar Zadar Šibenik JNA campaign Dubrovnik Banski dvori Široka Kula Lovas Baćin Saborsko Otkos 10 Erdut Dalmatian channels Škabrnja Vance plan Whirlwind Paulin Dvor Orkan 91 Voćin Joševica Devil's Beam Bruška Sarajevo ECMM helicopter downing Baranja Jackal Miljevci Plateau Tiger Liberated Land Konavle Vlaštica Maslenica Medak Pocket Winter '94 Leap 1 Flash Zagreb Leap 2 Summer '95 Storm Maestral 2 Varivode 

    Timeline of all major events Log Revolution Events in Serbia 

The Battle of Vukovar (Croatian: Bitka za Vukovar, Serbian: Битка за Вуковар, Bitka za Vukovar) was an 87-day siege of Vukovar in eastern Croatia by the Yugoslav People's Army (JNA), supported by various paramilitary forces from Serbia, between August and November 1991. Before the Croatian War of Independence the Baroque town was a prosperous, mixed community of Croats, Serbs and other ethnic groups. As Yugoslavia began to break up, Serbia's President Slobodan Milošević and Croatia's President Franjo Tuđman began pursuing nationalist politics. In 1990, an armed insurrection was started by Croatian Serb militias, supported by the Serbian government and paramilitary groups, who seized control of Serb-populated areas of Croatia. The JNA began to intervene in favour of the rebellion, and conflict broke out in the eastern Croatian region of Slavonia in May 1991. In August, the JNA launched a full-scale attack against Croatian-held territory in eastern Slavonia, including Vukovar.

Vukovar was defended by around 1,800 lightly armed soldiers of the Croatian National Guard (ZNG) and civilian volunteers, against as many as 36,000 JNA troops and Serb paramilitaries equipped with heavy armour and artillery. During the battle, shells and rockets were fired into the town at a rate of up to 12,000 a day.[7] At the time, it was the fiercest and most protracted battle seen in Europe since 1945, and Vukovar was the first major European town to be entirely destroyed since the Second World War.[8][9] When Vukovar fell on 18 November 1991, several hundred soldiers and civilians were massacred by Serb forces and at least 20,000 inhabitants were expelled.[10] Most of Vukovar was ethnically cleansed of its non-Serb population and became part of the self-declared Republic of Serbian Krajina. Several Serb military and political officials, including Milošević, were later indicted and in some cases jailed for war crimes committed during and after the battle.

The battle exhausted the JNA and proved a turning point in the Croatian war. A ceasefire was declared a few weeks later. Vukovar remained in Serb hands until 1998, when it was peacefully reintegrated into Croatia. It has since been rebuilt but has less than half of its pre-war population and many buildings are still scarred by the battle. Its two principal ethnic communities remain deeply divided and it has not regained its former prosperity.

Contents

    1 Background
    2 Prelude to the battle
    3 Opposing forces
        3.1 Croatian forces
        3.2 Yugoslav and Serb forces
    4 Phase I, August to September 1991
        4.1 JNA weaknesses and adoption of new tactics
    5 Phase II, October to November 1991
        5.1 Fall of Vukovar
    6 Casualties
        6.1 Croatian
        6.2 Serbian and Yugoslav
    7 War crimes
        7.1 Indictments and trials
    8 Political aspects
        8.1 Propaganda
        8.2 International reaction
        8.3 Croatian reaction
        8.4 Serbian reaction
        8.5 Other Yugoslav reaction
    9 Occupation, restoration and reconstruction
    10 Commemorations and memorials
    11 Films and books
    12 Notes
    13 References
    14 External links

Background
View of Vukovar from the Danube in 1917

Vukovar is an important regional centre on Croatia's eastern border, situated in eastern Slavonia on the west bank of the Danube river. The area has a diverse population of Croats, Serbs, Hungarians, Slovaks, Ruthenians and many other nationalities, who had lived together for centuries in relative harmony before the Croatian war. It was one of the wealthiest areas of Yugoslavia before the war.[11] Vukovar's long-standing prosperity was reflected in one of Croatia's finest ensembles of Baroque architecture.[12]

The region underwent major demographic changes following the Second World War, when its ethnic German inhabitants were expelled and replaced with settlers from elsewhere in Yugoslavia.[13] In the last Yugoslav census in 1991, the Vukovar municipality, which included the town and surrounding villages, was recorded as having 84,189 inhabitants, of whom 43.8 percent were Croats, 37.5 percent were Serbs and the remainder were members of other ethnic groups. The town's population was 47 percent Croat and 32.3 percent Serb.[14]

From 1945, the Socialist Federal Republic of Yugoslavia was governed as a federal socialist state comprising six newly created republics – Slovenia, Croatia, Bosnia and Herzegovina, Serbia, Montenegro and Macedonia.[15] The current border between Serbia and Croatia was defined in 1945 by a Yugoslav federal government commission which assigned areas with a majority Serb population to the Socialist Republic of Serbia and those with a Croatian majority to the Socialist Republic of Croatia.[16] This left a large Serb minority in Croatian territory.

After Yugoslavia's leader Josip Broz Tito died in 1980, long-suppressed ethnic nationalism revived and the individual republics began to assert their authority more strongly as the federal government weakened. Slovenia and Croatia moved towards multi-party democracy and economic reform, but Serbia's authoritarian communist President Slobodan Milošević opposed reform and sought to increase the power of the communist Yugoslav government.[17] In 1990, Slovenia and Croatia held elections that ended communist rule and brought pro-independence nationalist parties to power in both republics. In Croatia, the Croatian Democratic Union (HDZ) party of Franjo Tuđman took office, with Tuđman as President.[18]

Tuđman's programme was opposed by many members of Croatia's Serb minority, towards whom he was overtly antagonistic.[18] The Serb Democratic Party (SDS) of Croatia, supported by Milošević, denounced the HDZ as a reincarnation of the nationalist-fascist Ustaše movement, which had massacred hundreds of thousands of Serbs during the Second World War.[19] From mid-1990, the SDS mounted an armed rebellion in Serb-inhabited areas of Croatia and set up the self-declared Serbian Autonomous Oblast of Krajina with covert support from the Serbian government and Serbian paramilitary groups. The Croatian government rapidly lost control of large areas of the republic.[19] In February 1991, the Krajina Serbs declared independence from Croatia and announced that they would unite with Serbia. Other Serb communities around Croatia also announced that they would secede and established their own militias.[20]
Prelude to the battle

The conflict between Serbs and Croats spread to eastern Slavonia in early 1991. On 1 April, Serb villagers around Vukovar and other towns in eastern Slavonia began to erect barricades across main roads.[21] The White Eagles, a Serbian paramilitary group led by Vojislav Šešelj, moved into the Serb-populated village of Borovo Selo just north of Vukovar.[22] In mid-April 1991, Gojko Šušak, a Croatian government minister and hardline nationalist, personally fired three Armbrust shoulder-launched anti-tank missiles at houses inhabited by Serbs in Borovo Selo. There were no casualties, but the attack aggravated and deepened ethnic tensions.[23] On 2 May, Serb paramilitaries ambushed two Croatian police buses in the centre of Borovo Selo, killing 12 policemen and injuring 22 more. Three ",
  "num_chunks": 9
}